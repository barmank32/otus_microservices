stages:
  - test
  - build
  - deploy

variables:
  DOCKER_REGISTRY: cr.yandex/crpjnlko70d33tt15jvt

.docker_login:
  image: docker:18.09
  services:
    - docker:18.09-dind
  before_script:
    - docker login --username oauth --password $YC_TOKEN cr.yandex

.deploy:
  image: ubuntu:18.04
  before_script:
    - echo 'deploy $INSTANCE'
    - apt-get update && apt-get install -y curl
    - curl -s -o /tmp/install.sh https://storage.yandexcloud.net/yandexcloud-yc/install.sh 
    - bash /tmp/install.sh -i /usr -n
  script:
    - source ~/.bashrc
    - yc config set token $YC_TOKEN 
    - yc config set cloud-id $YC_CLOUD_ID 
    - yc config set folder-id $YC_FOLDER_ID 
    - yc config set compute-default-zone $YC_DEFAULT_ZONE
  after_script:
    - yc compute instance get $INSTANCE --full --format json > spec.json
    - bash spec.sh
    - cat spec.yml
    - yc compute instance update-container $INSTANCE --docker-compose-file spec.yml

build_bot:
  extends: .docker_login
  stage: build
  variables:
    IMAGE: crawler
  script:
    - echo 'Building docker image $IMAGE'
    - docker info
    - docker build -t $DOCKER_REGISTRY/$IMAGE:$CI_COMMIT_SHORT_SHA docker/search_engine_crawler
    - docker push $DOCKER_REGISTRY/$IMAGE:$CI_COMMIT_SHORT_SHA

build_ui:
  extends: .docker_login
  stage: build
  variables:
    IMAGE: crawler_ui
  script:
    - echo 'Building docker image $IMAGE'
    - docker info
    - docker build -t $DOCKER_REGISTRY/$IMAGE:$CI_COMMIT_SHORT_SHA docker/search_engine_ui
    - docker push $DOCKER_REGISTRY/$IMAGE:$CI_COMMIT_SHORT_SHA

test_bot:
  stage: test
  image: python:3.6.0-alpine
  services:
    - rabbitmq:3-management-alpine
  variables:
    RMQ_HOST: rabbitmq
    RMQ_QUEUE: 5672
    RMQ_USERNAME: guest
    RMQ_PASSWORD: guest
  script:
    - apk --no-cache --update add git
    - git clone $CI_REPOSITORY_URL /app
    - cd /app/docker/search_engine_crawler/   
    - pip install -r requirements.txt -r requirements-test.txt
    - python -m unittest discover -s tests/
    - coverage run -m unittest discover -s tests/
    - coverage report --include crawler/crawler.py

test_ui:
  stage: test
  image: python:3.6.0-alpine
  script:
    - apk --no-cache --update add git
    - git clone $CI_REPOSITORY_URL /app
    - cd /app/docker/search_engine_ui/ 
    - pip install -r requirements.txt -r requirements-test.txt
    - python -m unittest discover -s tests/
    - coverage run -m unittest discover -s tests/
    - coverage report --include ui/ui.py

deploy_bot:
  extends: .deploy
  stage: deploy
  variables:
    INSTANCE: crawler
    IMAGE: crawler

deploy_ui:
  extends: .deploy
  stage: deploy
  variables:
    INSTANCE: crawler-ui
    IMAGE: crawler_ui

